import os

# Constants.
kConfigName = "DromajoDualSmallBoomConfig"
kCopyFromPath = "/soe/nkabylka/multicore-cosim/chipyard/sims/vcs/generated-src/chipyard.TestHarness.{}".format(kConfigName)
kCopyToPathCommon = "../boom_rtl/generated_common"

# Specify all common aux files generated by Chisel infrastructure.
common_files = []
common_files.append("bootrom.rv32.img")
common_files.append("bootrom.rv64.img")
common_files.append("chipyard.TestHarness.{}.d".format(kConfigName))
common_files.append("chipyard.TestHarness.{}.dromajo_params.h".format(kConfigName))
common_files.append("chipyard.TestHarness.{}.dts".format(kConfigName))
common_files.append("ClockDividerN.sv")
common_files.append("EICG_wrapper.v")
common_files.append("IOCell.v")
common_files.append("mm.cc")
common_files.append("mm_dramsim2.cc")
common_files.append("mm_dramsim2.h")
common_files.append("mm.h")
common_files.append("plusarg_reader.v")
common_files.append("remote_bitbang.cc")
common_files.append("remote_bitbang.h")
common_files.append("SimDRAM.cc")
common_files.append("SimDRAM.v")
common_files.append("SimJTAG.cc")
common_files.append("SimJTAG.v")
common_files.append("SimSerial.cc")
common_files.append("SimSerial.v")
common_files.append("SimUART.cc")
common_files.append("SimUART.v")
common_files.append("testchip_tsi.cc")
common_files.append("testchip_tsi.h")
common_files.append("TestDriver.v")
common_files.append("uart.cc")
common_files.append("uart.h")

# Specify design files.
boom_top_name = "chipyard.TestHarness.{}.top.v".format(kConfigName)
boom_top_mem_name = "chipyard.TestHarness.{}.top.mems.v".format(kConfigName)
boom_harness_name = "chipyard.TestHarness.{}.harness.v".format(kConfigName)
boom_harness_mem_name = "chipyard.TestHarness.{}.harness.mems.v".format(kConfigName)

#################################
# Copy files where they should go.
#################################

# Remove old files.
os.system("rm -rf {}/*".format(kCopyToPathCommon))

# Copy common files.
for common_file in common_files:
    os.system("cp {}/{} {}/{}".format(kCopyFromPath, common_file, kCopyToPathCommon, common_file))

# Copy design files.
os.system("cp {}/{} ./templates/top_template.v".format(kCopyFromPath, boom_top_name))
os.system("cp {}/{} ../boom_rtl/top.mems.v".format(kCopyFromPath, boom_top_mem_name))
os.system("cp {}/{} ../boom_rtl/harness.v".format(kCopyFromPath, boom_harness_name))
os.system("cp {}/{} ../boom_rtl/harness.mems.v".format(kCopyFromPath, boom_harness_mem_name))

# Compile device tree for simulation.

